# Teste de conectividade UDP para Albion.PortBridge
# Testa o t√∫nel FRP enviando pacotes UDP para a porta 15151

param(
    [string]$TargetHost = "192.168.18.31",
    [int]$Port = 15151
)

Write-Host "==================================================" -ForegroundColor Cyan
Write-Host "    Teste UDP - Albion.PortBridge" -ForegroundColor Cyan
Write-Host "==================================================" -ForegroundColor Cyan
Write-Host ""

Write-Host "üéØ Configura√ß√£o:" -ForegroundColor Yellow
Write-Host "   Host: $TargetHost" -ForegroundColor White
Write-Host "   Porta: $Port" -ForegroundColor White
Write-Host "   Protocolo: UDP" -ForegroundColor White
Write-Host ""

function Test-UDPConnection {
    param(
        [string]$Message = "ping"
    )
    
    try {
        Write-Host "üîó Testando conex√£o UDP para $TargetHost`:$Port" -ForegroundColor Green
        Write-Host "üì§ Enviando: $Message" -ForegroundColor White
        
        # Cria endpoint UDP
        $endpoint = New-Object System.Net.IPEndPoint([System.Net.IPAddress]::Parse($TargetHost), $Port)
        $udpClient = New-Object System.Net.Sockets.UdpClient
        
        # Define timeout
        $udpClient.Client.ReceiveTimeout = 5000
        
        # Converte mensagem para bytes
        $messageBytes = [System.Text.Encoding]::UTF8.GetBytes($Message)
        
        # Envia mensagem
        $startTime = Get-Date
        $bytesSent = $udpClient.Send($messageBytes, $messageBytes.Length, $endpoint)
        
        Write-Host "‚úÖ Mensagem enviada: $bytesSent bytes" -ForegroundColor Green
        
        # Tenta receber resposta
        try {
            $responseEndpoint = New-Object System.Net.IPEndPoint([System.Net.IPAddress]::Any, 0)
            $responseBytes = $udpClient.Receive([ref]$responseEndpoint)
            $response = [System.Text.Encoding]::UTF8.GetString($responseBytes)
            
            $elapsed = ((Get-Date) - $startTime).TotalMilliseconds
            Write-Host "‚úÖ Resposta recebida de $($responseEndpoint.Address): $response" -ForegroundColor Green
            Write-Host "‚è±Ô∏è  Tempo de resposta: $([math]::Round($elapsed, 2))ms" -ForegroundColor White
            
            return $true
        }
        catch {
            Write-Host "‚ö†Ô∏è  Timeout - nenhuma resposta recebida" -ForegroundColor Yellow
            Write-Host "‚ÑπÔ∏è  Isso pode ser normal se o servi√ßo n√£o estiver configurado para responder" -ForegroundColor White
            return $true  # Considera sucesso se conseguiu enviar
        }
    }
    catch {
        Write-Host "‚ùå Erro na conex√£o: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
    finally {
        if ($udpClient) {
            $udpClient.Close()
        }
    }
}

function Test-AlbionPacket {
    try {
        # Simula pacote de login do Albion
        $albionPacket = @{
            type = "login"
            version = "1.0.0"
            timestamp = [long]([DateTimeOffset]::UtcNow.ToUnixTimeSeconds())
            data = "test_packet"
        }
        
        $message = $albionPacket | ConvertTo-Json -Compress
        Write-Host "üéÆ Testando pacote Albion Online..." -ForegroundColor Magenta
        return Test-UDPConnection -Message $message
        
    }
    catch {
        Write-Host "‚ùå Erro no teste Albion: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Teste b√°sico
Write-Host "üß™ Teste 1: Conex√£o b√°sica UDP" -ForegroundColor Yellow
$basicTest = Test-UDPConnection

# Teste com pacote Albion
Write-Host "`nüß™ Teste 2: Pacote Albion Online" -ForegroundColor Yellow
$albionTest = Test-AlbionPacket

# Resultado final
Write-Host "`n==================================================" -ForegroundColor Cyan
Write-Host "üìä RESULTADO DOS TESTES:" -ForegroundColor Cyan
Write-Host "==================================================" -ForegroundColor Cyan

if ($basicTest -and $albionTest) {
    Write-Host "‚úÖ Todos os testes passaram!" -ForegroundColor Green
    Write-Host "üéâ O t√∫nel FRP UDP est√° funcionando corretamente" -ForegroundColor Green
    Write-Host "üåê Voc√™ pode usar esta conex√£o para:" -ForegroundColor White
    Write-Host "   - Replay de pacotes Albion" -ForegroundColor White
    Write-Host "   - Bots e automa√ß√£o" -ForegroundColor White
    Write-Host "   - Sniffing de tr√°fego" -ForegroundColor White
}
else {
    Write-Host "‚ùå Alguns testes falharam" -ForegroundColor Red
    Write-Host "üîß Verifique:" -ForegroundColor Yellow
    Write-Host "   - Se o frps est√° rodando no segundo PC" -ForegroundColor White
    Write-Host "   - Se o frpc est√° rodando na m√°quina principal" -ForegroundColor White
    Write-Host "   - Se as regras de firewall est√£o corretas" -ForegroundColor White
    Write-Host "   - Se o IP est√° correto na configura√ß√£o" -ForegroundColor White
}

Write-Host "`nüí° Dica: Execute 'firewall-rules.bat' se ainda n√£o configurou o firewall" -ForegroundColor Cyan
